swagger: '2.0'
info:
  version: 0.2.0
  title: Animals
  description: >
    An example for how to use Basic Auth with Swagger.

    **User Name and Password**

    * User Name: `user`

    * Password: `pass`
schemes:
  - http
securityDefinitions:
  basicAuth:
    type: basic
    description: HTTP Basic Authentication. Works over `HTTP` and `HTTPS`

paths:
  /api/v1/pet/:
    post:
      security:
        - basicAuth: []
      parameters:
        - name: pet
          in: body
          description: new Pet
          required: true
          schema:
            "$ref": '#/definitions/createPet'
      responses:
        '200':
          schema:
            "$ref": "#/definitions/pet"
          description: 'The new pet of current user.'
        '401':
          schema:
            "$ref": "#/definitions/unauthorized"
          description: "User is not authenticated."
        '400':
          description: "Invalid payload."
    get:
      security:
        - basicAuth: []
      responses:
        '200':
          schema:
            type: array
            items:
              "$ref": "#/definitions/pet"
          description: 'Pet list.'
        '401':
          schema:
            "$ref": "#/definitions/unauthorized"
          description: "User is not authenticated."
  /api/v1/breed/:
    get:
      security:
        - basicAuth: []
      responses:
        '200':
          schema:
            type: array
            items:
              "$ref": "#/definitions/breed"
          description: 'Breed list.'
        '401':
          schema:
            "$ref": "#/definitions/unauthorized"
          description: "User is not authenticated."
  /api/v1/birth/:
    get:
      security:
        - basicAuth: []
      responses:
        '200':
          schema:
            type: array
            items:
              "$ref": "#/definitions/birth"
          description: 'Birth lists.'
        '401':
          schema:
            "$ref": "#/definitions/unauthorized"
          description: "User is not authenticated."

definitions:
  unauthorized:
    title: Unuathorized
    required:
      - error
    properties:
      error:
        type: string
        enum:
          - "401 Unauthorized"
  createPet:
    title: Pet
    required:
      - breed_id
      - name
      - gender
    properties:
      breed_id:
        type: integer
      father_id:
        type: integer
      mother_id:
        type: integer
      name:
        type: string
      gender:
        type: string
        enum:
          - male
          - female
  pet:
    title: Pet
    allOf:
      - $ref: '#/definitions/createPet'
      - $ref: '#/definitions/timestamps'
  breed:
    title: Breed
    allOf:
      - $ref: '#/definitions/timestamps'
    description: An Bredd entity.
    required:
      - name
    properties:
      name:
        type: string
  birth:
    title: Birth
    allOf:
      - $ref: '#/definitions/timestamps'
    required:
      - child_id
      - father_id
      - mother_id
    properties:
      child_id:
        type: integer
      father_id:
        type: integer
      mother_id:
        type: integer
  timestamps:
    required:
      - id
      - created_at
      - updated_at
    properties:
      id:
        type: integer
      created_at:
        type: string
        format: date-time
      updated_at:
        type: string
        format: date-time
